
(3.0)

[o] merge schedule_queue and unschedule_queue (and merge [un]schedule steps)
[x] OR stop using queue, since we've got the thread-safe JobArray
[x] if possible, drop the mutex in JobArray
    NO, that mutex is necessary for Scheduler#jobs (on JRuby an co)...
[o] named mutexes
[o] drop the schedule queue, rely on the mutex in JobArray
[o] def jobs; (@jobs.to_a + running_jobs).uniq; end
[o] replace @unscheduled by @unscheduled_at
[o] make sure #jobs doesn't return unscheduled jobs
[o] job tags and find_by_tag(t) (as in rs 2.x)
[o] require tzinfo anyway (runtime dep)
[o] document frequency
[o] accept :frequency => '5s'
[o] timeout (as in rufus-scheduler 2.x)
[o] Rufus::Scheduler#running_jobs (as in rufus-scheduler 2.x)
[o] Rufus::Scheduler#terminate_all_jobs
[o] Rufus::Scheduler::Job#kill
[x] Rufus::Scheduler#kill_all_jobs
[o] Rufus::Scheduler#shutdown(:terminate or :kill (or nothing))
[o] RepeatJob #pause / #resume (think about discard past)
[o] Rufus::Scheduler.start_new (backward comp) (with deprec note?)
[o] pass job to scheduled block? What does rs 2.x do?
[o] :first[_in|_at] for RepeatJob
[o] :last[_in|_at] for RepeatJob
[o] :times for RepeatJob (how many recurrences)
[o] fix issue #39 (first_at parses as UTC)
[o] about issue #43, raise if cron/every job frequency < scheduler frequency
[o] unlock spec/parse_spec.rb:30 "parse datimes with timezones"
[o] some kind of Schedulable (Xyz#call(job, time))
[o] add Jruby and Rubinius to Travis
[o] make Job #first_at= / #last_at= automatically parse strings?

[ ] :lockfile => x, timestamp, process_id, thread_id...
    warning: have to clean up that file on exit... or does the scheduler
    timestamps it?
[ ] lockblock? pass a block to teach the scheduler how to lock?

[ ] idea: :mutex => x and :skip_on_mutex => true ?
    would prevent blocking/waiting for the mutex to get available
    :mutex => [ "mutex_name", true ]
    :mutex => [ [ "mutex_name", true ], [ "other_mutex_name", false ] ]

[ ] do repeat jobs reschedule after timing out?

[ ] thread pool something? Thread upper limit?
    look at EM's thread pool

[ ] discard past? discard_past => true or => "1d"

[ ] :unschedule_if => lambda { |job| ... }
[ ] OR look at how it was done in rs 2.0.x, some return value?
    no, pass the job as arg to the block, then let the block do job.unschedule
    so, document schedule.every('10d') { |j| j.unschedule if x?() }

[ ] bring back EM (but only EM.defer ?) :defer => true (Job or Scheduler
    or both option?)

[ ] schedule_interval('20s')?
[ ] prepare a daemon

[ ] Scheduler#reschedule(job) (new copy of the job)

[ ] :if => lambda { |job, time| ... } why not?

[ ] schedule_in(2.days.from_now) {}
    at and in could understand each others time parameter, ftw...
    use the new #parse_to_time?


################################################################################

(was 2.0)

[o] spec for jobs in the past (in and at)
[o] :discard_past

[o] every
[o] cron

[o] CHECK every and unschedule !!!

[o] :tags
[o] timeout feature (at/in/every/cron) in Job class

[o] :first_in, :first_at

[x] :dont_reschedule (or block returns false ?)

[o] [get_]jobs methods
[o] find methods

[x] CTRL-C during tests : allow, trap_int...

[o] 1.9
[o] j1.2.0

[o] revise trigger block arity
    use a compatibility switch ? yes

[o] synchronize @cron_jobs ?

[o] why not : make it work even if EM is not present
    EmScheduler < Scheduler
    FiberScheduler < Scheduler

[x] :blocking => 'blockname' idea, mutex = @mutexes['blockname'] ...
[o] eventually, make sleep frequency customizable

[o] PlainScheduler : name thread

[o] document :blocking

[o] README.rdoc
[o] fix jruby120 --em

[o] handle_exception (job, e)

[o] Schedulable

[o] Rufus::Scheduler.start_new() : autodetect EM ?
[o] check :blocking and every (reschedule blocking...)
[o] document :thread_name scheduler option

[o] unify cron_jobs#trigger_matching_jobs(now) and jobs#job_to_trigger
[o] pluggable job queues

[ ] Joel's complaint about timeout jobs gone ballistic
[x] move trigger_job out of the scheduler

